# -*- coding: utf-8 -*-
"""security_middleware.py - Security Middleware and Audit Logging

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YoddYEEbH-vAzHRlwP2-wNP7Fcm4Wnc2
"""

# security_middleware.py
# This module provides security-related functionalities for the Flask application,
# including audit logging and decorators for role-based access control.

import logging
from functools import wraps
from flask import request, session, flash, redirect, url_for

# Configure logging for the security module
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SecurityMiddleware:
    """
    A class to encapsulate security-related middleware for the Flask app.
    Currently, it primarily sets up a before_request hook for audit logging.
    """
    def __init__(self, app):
        self.app = app
        self.app.before_request(self._audit_log_before_request)
        logger.info("SecurityMiddleware initialized.")

    def _audit_log_before_request(self):
        """
        Logs details of every incoming request for auditing purposes.
        This runs before each request is processed by a route.
        """
        user = session.get('username', 'anonymous')
        ip_address = request.remote_addr
        method = request.method
        path = request.path
        logger.info(f"AUDIT: User='{user}', IP='{ip_address}', Method='{method}', Path='{path}'")

# Decorator for audit logging specific actions
def audit_log(action_description):
    """
    Decorator to log specific actions performed by users.
    Args:
        action_description (str): A description of the action being logged.
    """
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            user = session.get('username', 'anonymous')
            ip_address = request.remote_addr
            logger.info(f"AUDIT ACTION: User='{user}', IP='{ip_address}', Action='{action_description}'")
            return f(*args, **kwargs)
        return decorated_function
    return decorator

# Decorator for role-based access control
def require_role(role):
    """
    Decorator to restrict access to a route based on user role.
    Args:
        role (str): The required role (e.g., 'admin', 'operator').
    """
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            user_role = session.get('user_role')
            if user_role != role:
                flash(f"Access Denied: You need '{role}' privileges to access this page.", 'error')
                logger.warning(f"ACCESS DENIED: User '{session.get('username', 'anonymous')}' (Role: {user_role}) attempted to access '{request.path}'")
                return redirect(url_for('dashboard')) # Redirect to a safe page
            return f(*args, **kwargs)
        return decorated_function
    return decorator