# -*- coding: utf-8 -*-
"""utils.py - Utility Functions

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bmwEpDtbJe7BUB93aR1lE7wvJdPqhX3d
"""

# utils.py
# This file contains various utility functions used across the Flask application,
# such as data validation and ID generation.

import re
import random
import hashlib
from datetime import datetime

def validate_card_number(card_number: str) -> bool:
    """
    Performs a basic Luhn algorithm check for card number validation.
    This is a client-side check; actual validation happens with the ISO 8583 server.
    """
    # Remove any non-digit characters
    card_number = re.sub(r'\D', '', card_number)

    if not (13 <= len(card_number) <= 19):
        return False

    # Luhn algorithm
    digits = [int(d) for d in card_number]
    checksum = 0
    is_even = False

    for i in range(len(digits) - 1, -1, -1):
        digit = digits[i]
        if is_even:
            digit *= 2
            if digit > 9:
                digit -= 9
        checksum += digit
        is_even = not is_even

    return checksum % 10 == 0

def format_amount(amount: float, currency: str = "USD") -> str:
    """
    Formats a float amount into a currency string.
    """
    return f"{currency} {amount:,.2f}"

def generate_transaction_id() -> str:
    """
    Generates a unique transaction ID using a timestamp and a random component.
    """
    timestamp_part = datetime.now().strftime("%Y%m%d%H%M%S%f")[:-3] # YYYYMMDDHHMMSSmmm
    random_part = str(random.randint(1000, 9999))
    # Combine and hash to ensure uniqueness and fixed length if needed, or just combine
    raw_id = f"{timestamp_part}{random_part}"
    # Using SHA256 hash to get a fixed-length, unique ID
    hashed_id = hashlib.sha256(raw_id.encode()).hexdigest()
    return f"TXN-{hashed_id[:16].upper()}" # Use a portion of the hash for readability
