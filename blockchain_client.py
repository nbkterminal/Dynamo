# -*- coding: utf-8 -*-
"""blockchain_client.py - Blockchain Payout Wrapper

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1efX2wgsDqc4xvBybvTjsyCIY476DrTpy
"""

# blockchain_client.py
# This file acts as a client/wrapper for the actual cryptocurrency payout logic
# defined in isocrypto.py. It provides a clean interface for app.py to trigger payouts.

import logging
from isocrypto import initiate_crypto_payout # Import the core crypto payout function

logger = logging.getLogger(__name__)

class BlockchainClient:
    """
    Client for interacting with blockchain for cryptocurrency payouts.
    Wraps the functionality provided by isocrypto.py.
    """
    def __init__(self):
        logger.info("BlockchainClient initialized.")

    def send_usdt(self, network: str, to_address: str, amount_usd: float):
        """
        Initiates a USDT payout on the specified blockchain network.

        Args:
            network (str): The blockchain network ('erc20' or 'trc20').
            to_address (str): The recipient's wallet address.
            amount_usd (float): The amount in USD to be paid out (will be converted to USDT).

        Returns:
            dict: A dictionary containing the status, message, and transaction hash
                  of the payout attempt.
        """
        logger.info(f"Attempting to send {amount_usd} USD (as USDT) to {to_address} on {network} network.")

        # Call the core crypto payout function from isocrypto.py
        result = initiate_crypto_payout(
            fiat_amount=amount_usd,
            crypto_address=to_address,
            crypto_network_type=network.upper() # isocrypto expects 'ERC20' or 'TRC20'
        )

        # Log the result of the crypto payout attempt
        if result.get('status') == 'Success':
            logger.info(f"Crypto payout successful: {result.get('message')} Hash: {result.get('transaction_hash')}")
            return {'success': True, 'tx_hash': result.get('transaction_hash'), 'message': result.get('message')}
        else:
            logger.error(f"Crypto payout failed: {result.get('message')}")
            return {'success': False, 'error': result.get('message')}
