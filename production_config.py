# -*- coding: utf-8 -*-
"""production_config.py - Production Configuration Validation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LnrcUbdXwkwccjTtAO6Tub8QOhAFxz7U
"""

# production_config.py
# This file contains functions to validate production-specific configurations,
# ensuring that critical environment variables are set before deployment.

import os
import logging

logger = logging.getLogger(__name__)

def validate_production_config():
    """
    Validates that essential environment variables for production are set.
    Returns True if all required variables are set, False otherwise.
    """
    required_env_vars = [
        'SESSION_SECRET', # Flask app.secret_key
        'ISO_SERVER_HOST', # IP address of the external ISO 8583 server
        'ISO_SERVER_PORT', # Port of the external ISO 8583 server
        'DEFAULT_ERC20_WALLET', # Default ERC20 payout wallet
        'DEFAULT_TRC20_WALLET', # Default TRC20 payout wallet
        'ETH_PAYOUT_PRIVATE_KEY', # Private key for Ethereum payouts
        'TRX_PAYOUT_PRIVATE_KEY', # Private key for Tron payouts
        'INFURA_API_KEY', # API key for Infura (Ethereum RPC)
        'TRONGRID_API_KEY', # API key for Trongrid (Tron RPC)
        'DAILY_LIMIT_PER_TERMINAL', # Daily transaction limit
        'DEFAULT_TRANSACTION_AMOUNT' # Default amount for terminal
    ]

    is_valid = True
    for var in required_env_vars:
        if os.environ.get(var) is None:
            logger.error(f"Production config error: Environment variable '{var}' is not set.")
            is_valid = False

    if not is_valid:
        logger.critical("Production configuration is incomplete. Please set all required environment variables.")
    else:
        logger.info("Production configuration validated successfully.")

    return is_valid
