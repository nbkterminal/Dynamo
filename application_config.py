# -*- coding: utf-8 -*-
"""config.py - Application Configuration

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NwVe7aFBmHd2-hrHMJ5tO8DsWYwsZAgH
"""

# config.py
# This file defines general application configurations, including
# default crypto wallet addresses for payouts and other constants.

import os

# --- Default Merchant Payout Wallet Addresses ---
# These are the default addresses where cryptocurrency payouts will be sent.
# In a production environment, these should ideally be managed securely
# (e.g., via environment variables, a database, or a dedicated secret management service).
# For this application, they are loaded from environment variables.

# Example default values for testing if environment variables are not set.
# These should be replaced with actual merchant wallet addresses in production.
DEFAULT_ERC20_WALLET = os.environ.get('DEFAULT_ERC20_WALLET', '0xDefaultERC20WalletAddressForTesting')
DEFAULT_TRC20_WALLET = os.environ.get('DEFAULT_TRC20_WALLET', 'TDefaultTRC20WalletAddressForTesting')

# --- Mock Crypto Exchange Rates ---
# USDT is a stablecoin pegged to USD, so the rate is typically 1:1.
# This is used for converting fiat amount to USDT amount for payout.
MOCK_USDT_USD_RATE = 1.00 # 1 USDT = 1 USD (stablecoin)

# --- Simulated Network Fees (for display purposes in UI) ---
# These are illustrative values to show potential network costs to the user.
# Actual blockchain network fees are dynamic and paid in the native currency
# (ETH for Ethereum, TRX for Tron) from the sender's wallet.
SIMULATED_ERC20_USDT_FEE = 3.00 # Example mock fee in USDT for ERC20 withdrawal
SIMULATED_TRC20_USDT_FEE = 1.00 # Example mock fee in USDT for TRC20 withdrawal

def get_wallet_config(network_type: str) -> dict:
    """
    Retrieves the default wallet address and simulated fee for a given network type.
    """
    if network_type.upper() == 'ERC20':
        return {
            'address': DEFAULT_ERC20_WALLET,
            'simulated_fee_usdt': SIMULATED_ERC20_USDT_FEE
        }
    elif network_type.upper() == 'TRC20':
        return {
            'address': DEFAULT_TRC20_WALLET,
            'simulated_fee_usdt': SIMULATED_TRC20_USDT_FEE
        }
    else:
        # Fallback for unrecognized network types
        return {
            'address': 'UNKNOWN_WALLET_ADDRESS',
            'simulated_fee_usdt': 0.0
        }
